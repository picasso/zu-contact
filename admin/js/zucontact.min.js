(function () {
	'use strict';

	// WordPress dependencies
	// const { map, has } = lodash;
	var __ = wp.i18n.__; // Internal dependencies
	// 'Simple Ajax Contact Forms';

	var options = {
	  use_recaptcha: {
	    label: __('Use Google reCAPTCHA?', 'zucontact'),
	    help: __('Loads Google recaptcha script if required.', 'zucontact')
	  },
	  // client_validate: {
	  // 	label: 	__('Use client validation instead of server?', 'zucontact'),
	  // 	help:	__('Add scripts for validation on client (without AJAX).', 'zucontact'),
	  // },
	  custom_css: {
	    label: __('Use plugin CSS?', 'zucontact'),
	    help: __('If switched off the plugin stylesheet won\'t be loaded.', 'zucontact') // depends: 'responsive',

	  },
	  me_or_us: {
	    label: __('Use "Me" instead of "Us"?', 'zucontact'),
	    help: __('If switched off - "Us" will be used in the form subheading.', 'zucontact'),
	    // 2em -> margins above and under the divider
	    divider: 2
	  }
	};
	var notify = {
	  label: __('Notify emails', 'zucontact'),
	  input: __('Enter an email to add to the list', 'zucontact'),
	  help: __('List of emails to be notified when a form entry occurs.', 'zucontact')
	};
	var mailer = {
	  server: __('Enter SMTP server name', 'zucontact'),
	  ssl: __('SSL Required', 'zucontact'),
	  ssl_help: __('When switched on - SSL encryption system will be used (TLS instead).', 'zucontact'),
	  port: __('Server port', 'zucontact'),
	  auth: __('Authentication Required', 'zucontact'),
	  auth_help: __('If authentication required you should provide Username and Password.', 'zucontact'),
	  username: __('Username (this is usually your email address)', 'zucontact'),
	  password: __('Password', 'zucontact'),
	  from: __('"From" email address (usually you should own the domain you are sending from)', 'zucontact'),
	  note: __('In order for the notifications to work, you need to have transactional emails configured in your copy of WordPress. This is usually done by your ISP, but if notifications are not sent, then I strongly recommend that you use one of the plugins that can be easily found on the Internet (for example, $links). As a last resort, you can configure access to the SMPT server manually using the fields below, but you must understand exactly what you are doing. To avoid possible conflicts with the plugin, I recommend to reset all SMPT server settings with "Reset Server Settings" button.', 'zucontact'),
	  or: __('or', 'zucontact'),
	  resetAll: __('Reset Server Settings', 'zucontact')
	};
	var recaptcha = {
	  sitekey: __('Site key', 'zucontact'),
	  secret: __('Secret key', 'zucontact'),
	  note: __('For getting started, you need to register your site here: $links Choose the option "reCAPTCHA v2" which gives an "I’m not a robot" Checkbox. Once you entered all needed details you will get your Site key and Secret key.', 'zucontact'),
	  theme: __('The color theme of the widget', 'zucontact'),
	  size: __('The size of the widget', 'zucontact'),
	  themeOptions: [{
	    value: 'light',
	    label: __('Light Theme', 'zucontact')
	  }, {
	    value: 'dark',
	    label: __('Dark Theme', 'zucontact')
	  }],
	  sizeOptions: [{
	    value: 'compact',
	    label: __('Compact Widget Size', 'zucontact')
	  }, {
	    value: 'normal',
	    label: __('Normal Widget Size', 'zucontact')
	  }]
	};
	var panels = {
	  recaptcha_keys: {
	    value: true,
	    label: __('Google reCAPTCHA', 'zucontact'),
	    // Это позволит исключить эту панель когда значение option is false
	    depends: 'use_recaptcha'
	  },
	  mailer: {
	    value: false,
	    label: __('Mail Server Settings', 'zucontact')
	  }
	};
	var zucontact = {
	  options: options,
	  panels: panels,
	  notify: notify,
	  mailer: mailer,
	  recaptcha: recaptcha
	};

	function _slicedToArray(arr, i) {
	  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();
	}

	function _arrayWithHoles(arr) {
	  if (Array.isArray(arr)) return arr;
	}

	function _iterableToArrayLimit(arr, i) {
	  if (typeof Symbol === "undefined" || !(Symbol.iterator in Object(arr))) return;
	  var _arr = [];
	  var _n = true;
	  var _d = false;
	  var _e = undefined;

	  try {
	    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {
	      _arr.push(_s.value);

	      if (i && _arr.length === i) break;
	    }
	  } catch (err) {
	    _d = true;
	    _e = err;
	  } finally {
	    try {
	      if (!_n && _i["return"] != null) _i["return"]();
	    } finally {
	      if (_d) throw _e;
	    }
	  }

	  return _arr;
	}

	function _unsupportedIterableToArray(o, minLen) {
	  if (!o) return;
	  if (typeof o === "string") return _arrayLikeToArray(o, minLen);
	  var n = Object.prototype.toString.call(o).slice(8, -1);
	  if (n === "Object" && o.constructor) n = o.constructor.name;
	  if (n === "Map" || n === "Set") return Array.from(o);
	  if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);
	}

	function _arrayLikeToArray(arr, len) {
	  if (len == null || len > arr.length) len = arr.length;

	  for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];

	  return arr2;
	}

	function _nonIterableRest() {
	  throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
	}

	// WordPress dependencies
	var recaptchaTest = {
	  sitekey: '***REMOVED***',
	  secret: '***REMOVED***',
	  theme: 'dark',
	  size: 'normal'
	};
	var mailerTest = {
	  server: "***REMOVED***",
	  port: 25,
	  ssl: false,
	  auth: true,
	  username: "***REMOVED***",
	  password: "***REMOVED***_a4763150cf844ba269e4497f2eb8290f",
	  from: "mailer@***REMOVED***.ru"
	};

	// WordPress dependencies
	var _lodash = lodash,
	    get = _lodash.get,
	    mapKeys = _lodash.mapKeys,
	    split = _lodash.split;
	var _wp$components = wp.components,
	    Button = _wp$components.Button,
	    ToggleControl = _wp$components.ToggleControl,
	    ExternalLink = _wp$components.ExternalLink;
	var useCallback = wp.element.useCallback; // Zukit dependencies

	var _wp$zukit$components = wp.zukit.components,
	    ZukitDivider = _wp$zukit$components.ZukitDivider,
	    ZukitPanel = _wp$zukit$components.ZukitPanel,
	    AdvTextControl = _wp$zukit$components.AdvTextControl; // NOTE: delete after tests

	var ZucontactMailer = function ZucontactMailer(_ref) {
	  var data = _ref.data,
	      options = _ref.options,
	      updateOptions = _ref.updateOptions;
	  // Zubug.data({options});
	  var settings = get(options, 'mailer') || {};
	  var updateMailerOptions = useCallback(function (update) {
	    var mailerUpdate = mapKeys(update, function (_, key) {
	      return "mailer.".concat(key);
	    });
	    updateOptions(mailerUpdate);
	  }, [updateOptions]);

	  var _split = split(data.note, '$links'),
	      _split2 = _slicedToArray(_split, 2),
	      _split2$ = _split2[0],
	      beforeLinks = _split2$ === void 0 ? '' : _split2$,
	      _split2$2 = _split2[1],
	      afterLinks = _split2$2 === void 0 ? '' : _split2$2;

	  return /*#__PURE__*/React.createElement(ZukitPanel, {
	    id: "mailer",
	    initialOpen: false
	  }, /*#__PURE__*/React.createElement("div", {
	    className: "__note"
	  }, beforeLinks, /*#__PURE__*/React.createElement(ExternalLink, {
	    href: "https://pepipost.com/"
	  }, "Pepipost"), " ".concat(data.or, " "), /*#__PURE__*/React.createElement(ExternalLink, {
	    href: "https://www.mailjet.com/"
	  }, "Mailjet"), afterLinks), /*#__PURE__*/React.createElement(AdvTextControl, {
	    strict: "url",
	    label: data.server,
	    value: settings.server || '',
	    onChange: function onChange(value) {
	      return updateMailerOptions({
	        server: value
	      });
	    } // onKeyDown={ onKeyDown }

	  }), /*#__PURE__*/React.createElement(AdvTextControl, {
	    strict: "number",
	    label: data.port,
	    value: settings.port || '',
	    onChange: function onChange(value) {
	      return updateMailerOptions({
	        port: value
	      });
	    }
	  }), /*#__PURE__*/React.createElement(ZukitDivider, {
	    size: 2
	  }), /*#__PURE__*/React.createElement(ToggleControl, {
	    label: data.ssl,
	    help: data.ssl_help,
	    checked: !!settings.ssl,
	    onChange: function onChange() {
	      return updateMailerOptions({
	        ssl: !settings.ssl
	      });
	    }
	  }), /*#__PURE__*/React.createElement(ToggleControl, {
	    label: data.auth,
	    help: data.auth_help,
	    checked: !!settings.auth,
	    onChange: function onChange() {
	      return updateMailerOptions({
	        auth: !settings.auth
	      });
	    }
	  }), settings.auth && /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(AdvTextControl, {
	    label: data.username,
	    value: settings.username || '',
	    onChange: function onChange(value) {
	      return updateMailerOptions({
	        username: value
	      });
	    }
	  }), /*#__PURE__*/React.createElement(AdvTextControl, {
	    isPassword: true,
	    label: data.password,
	    value: settings.password,
	    onChange: function onChange(value) {
	      return updateMailerOptions({
	        password: value
	      });
	    }
	  })), /*#__PURE__*/React.createElement(AdvTextControl, {
	    strict: "email",
	    label: data.from,
	    value: settings.from || '',
	    onChange: function onChange(value) {
	      return updateMailerOptions({
	        from: value
	      });
	    }
	  }), /*#__PURE__*/React.createElement(ZukitDivider, {
	    size: 2
	  }), /*#__PURE__*/React.createElement("div", {
	    className: "__flex __right"
	  }, /*#__PURE__*/React.createElement(Button, {
	    isSecondary: true,
	    className: "__plugin_actions __auto magenta",
	    icon: "lightbulb",
	    onClick: function onClick() {
	      return updateOptions({
	        mailer: mailerTest
	      });
	    }
	  }, 'Restore Pepipost Settings'), /*#__PURE__*/React.createElement(Button, {
	    isSecondary: true,
	    isLarge: true,
	    className: "__plugin_actions __auto admin-blue",
	    label: data.resetAll,
	    icon: "trash",
	    onClick: function onClick() {
	      return updateOptions({
	        mailer: null
	      });
	    }
	  }, data.resetAll)));
	};

	// WordPress dependencies
	var _lodash$1 = lodash,
	    get$1 = _lodash$1.get,
	    mapKeys$1 = _lodash$1.mapKeys,
	    split$1 = _lodash$1.split;
	var _wp$components$1 = wp.components,
	    Button$1 = _wp$components$1.Button,
	    SelectControl = _wp$components$1.SelectControl,
	    ExternalLink$1 = _wp$components$1.ExternalLink;
	var useCallback$1 = wp.element.useCallback; // Zukit dependencies

	var _wp$zukit$components$1 = wp.zukit.components,
	    ZukitDivider$1 = _wp$zukit$components$1.ZukitDivider,
	    ZukitPanel$1 = _wp$zukit$components$1.ZukitPanel,
	    AdvTextControl$1 = _wp$zukit$components$1.AdvTextControl; // NOTE: delete after tests

	var ZucontactRecaptcha = function ZucontactRecaptcha(_ref) {
	  var data = _ref.data,
	      options = _ref.options,
	      updateOptions = _ref.updateOptions;
	  // Zubug.data({options});
	  var settings = get$1(options, 'recaptcha') || {};
	  var updateRecaptchaOptions = useCallback$1(function (update) {
	    var mailerUpdate = mapKeys$1(update, function (_, key) {
	      return "recaptcha.".concat(key);
	    });
	    updateOptions(mailerUpdate);
	  }, [updateOptions]);

	  var _split = split$1(data.note, '$links'),
	      _split2 = _slicedToArray(_split, 2),
	      _split2$ = _split2[0],
	      beforeLinks = _split2$ === void 0 ? '' : _split2$,
	      _split2$2 = _split2[1],
	      afterLinks = _split2$2 === void 0 ? '' : _split2$2;

	  return /*#__PURE__*/React.createElement(ZukitPanel$1, {
	    id: "recaptcha_keys",
	    initialOpen: false
	  }, /*#__PURE__*/React.createElement("div", {
	    className: "__note"
	  }, beforeLinks, /*#__PURE__*/React.createElement(ExternalLink$1, {
	    href: " https://www.google.com/recaptcha/admin/"
	  }, "Google reCAPTCHA"), /*#__PURE__*/React.createElement("br", null), afterLinks), /*#__PURE__*/React.createElement(AdvTextControl$1, {
	    isPassword: true,
	    label: data.sitekey,
	    value: settings.sitekey,
	    onChange: function onChange(value) {
	      return updateRecaptchaOptions({
	        sitekey: value
	      });
	    }
	  }), /*#__PURE__*/React.createElement(AdvTextControl$1, {
	    isPassword: true,
	    label: data.secret,
	    value: settings.secret,
	    onChange: function onChange(value) {
	      return updateRecaptchaOptions({
	        secret: value
	      });
	    }
	  }), /*#__PURE__*/React.createElement(SelectControl, {
	    className: "__block_label",
	    label: data.theme,
	    value: settings.theme || 'light',
	    onChange: function onChange(value) {
	      return updateRecaptchaOptions({
	        theme: value
	      });
	    },
	    options: data.themeOptions
	  }), /*#__PURE__*/React.createElement(SelectControl, {
	    className: "__block_label",
	    label: data.size,
	    value: settings.size || 'normal',
	    onChange: function onChange(value) {
	      return updateRecaptchaOptions({
	        size: value
	      });
	    },
	    options: data.sizeOptions
	  }), /*#__PURE__*/React.createElement(ZukitDivider$1, {
	    size: 2
	  }), /*#__PURE__*/React.createElement("div", {
	    className: "__flex __right"
	  }, /*#__PURE__*/React.createElement(Button$1, {
	    isSecondary: true,
	    className: "__plugin_actions __auto magenta",
	    icon: "lightbulb",
	    onClick: function onClick() {
	      return updateOptions({
	        recaptcha: recaptchaTest
	      });
	    }
	  }, 'Restore Settings'), /*#__PURE__*/React.createElement(Button$1, {
	    isSecondary: true,
	    isLarge: true,
	    className: "__plugin_actions __auto admin-blue",
	    label: data.resetAll,
	    icon: "trash",
	    onClick: function onClick() {
	      return updateOptions({
	        recaptcha: null
	      });
	    }
	  }, data.resetAll)));
	};

	// WordPress dependencies
	var useCallback$2 = wp.element.useCallback; // Zukit dependencies

	var _wp$zukit$render = wp.zukit.render,
	    renderPage = _wp$zukit$render.renderPage,
	    toggleOption = _wp$zukit$render.toggleOption;
	var _wp$zukit$components$2 = wp.zukit.components,
	    ListInput = _wp$zukit$components$2.ListInput,
	    ZukitPanel$2 = _wp$zukit$components$2.ZukitPanel; // Internal dependencies

	var EditZucontact = function EditZucontact(_ref) {
	  var title = _ref.title,
	      options = _ref.options,
	      updateOptions = _ref.updateOptions;
	  var optionsData = zucontact.options,
	      notify = zucontact.notify,
	      mailer = zucontact.mailer,
	      recaptcha = zucontact.recaptcha;
	  var onNotifyChange = useCallback$2(function (value) {
	    updateOptions({
	      notify: value
	    });
	  }, [updateOptions]);
	  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(ZukitPanel$2, {
	    title: title
	  }, toggleOption(optionsData, options, updateOptions), /*#__PURE__*/React.createElement(ListInput, {
	    strict: "email",
	    label: notify.label,
	    inputLabel: notify.input,
	    help: notify.help,
	    value: options.notify,
	    onChange: onNotifyChange
	  })), /*#__PURE__*/React.createElement(ZucontactRecaptcha, {
	    data: recaptcha,
	    options: options,
	    updateOptions: updateOptions
	  }), /*#__PURE__*/React.createElement(ZucontactMailer, {
	    data: mailer,
	    options: options,
	    updateOptions: updateOptions
	  }));
	};

	renderPage('zucontact', {
	  edit: EditZucontact,
	  panels: zucontact.panels
	});

}());
//# sourceMappingURL=zucontact.min.js.map
