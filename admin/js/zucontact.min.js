(function () {
	'use strict';

	// WordPress dependencies
	// const { ExternalLink } = wp.components;
	// const { map, has } = lodash;
	var __ = wp.i18n.__; // Internal dependencies
	// 'Simple Ajax Contact Forms';

	var options = {
	  use_recaptcha: {
	    label: __('Use Google reCAPTCHA?', 'zucontact'),
	    help: __('Loads Google recaptcha script if required.', 'zucontact')
	  },
	  client_validate: {
	    label: __('Use client validation instead of server?', 'zucontact'),
	    help: __('Add scripts for validation on client (without AJAX).', 'zucontact')
	  },
	  custom_css: {
	    label: __('Use plugin CSS?', 'zucontact'),
	    help: __('If switched off the plugin stylesheet won\'t be loaded.', 'zucontact') // depends: 'responsive',

	  },
	  me_or_us: {
	    label: __('Use "Me" instead of "Us"?', 'zucontact'),
	    help: __('If switched off - "Us" will be used in the form subheading.', 'zucontact'),
	    // 2em -> margins above and under the divider
	    divider: 2
	  }
	};
	var notify = {
	  label: __('Notify emails', 'zucontact'),
	  input: __('Enter an email to add to the list', 'zucontact'),
	  help: __('List of emails to be notified when a form entry occurs.', 'zucontact')
	};
	var panels = {
	  recaptcha_keys: {
	    value: true,
	    label: __('Google reCAPTCHA API Keys', 'zucontact'),
	    // Это позволит исключить эту панель когда значение option is false
	    depends: 'use_recaptcha'
	  } // sizes: {
	  // 	value: true,
	  // 	label: 	__('Media Sizes', 'zucontact'),
	  // },

	};
	var zucontact = {
	  options: options,
	  panels: panels,
	  notify: notify
	};

	// WordPress dependencies
	var useCallback = wp.element.useCallback; // Zukit dependencies

	var _wp$zukit$render = wp.zukit.render,
	    renderPage = _wp$zukit$render.renderPage,
	    toggleOption = _wp$zukit$render.toggleOption;
	var _wp$zukit$components = wp.zukit.components,
	    ListInput = _wp$zukit$components.ListInput,
	    ZukitPanel = _wp$zukit$components.ZukitPanel; // ZukitDivider

	var EditZucontact = function EditZucontact(_ref) {
	  var title = _ref.title,
	      options = _ref.options,
	      updateOptions = _ref.updateOptions;
	  var optionsData = zucontact.options,
	      notify = zucontact.notify;
	  var onNotifyChange = useCallback(function (value) {
	    updateOptions({
	      notify: value
	    });
	  }, [updateOptions]); // console.log(panels);
	  // console.log(options);

	  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(ZukitPanel, {
	    title: title
	  }, toggleOption(optionsData, options, updateOptions), /*#__PURE__*/React.createElement(ListInput, {
	    strict: "email",
	    label: notify.label,
	    inputLabel: notify.input,
	    help: notify.help,
	    value: options.notify,
	    onChange: onNotifyChange
	  })));
	};

	renderPage('zucontact', {
	  edit: EditZucontact,
	  panels: zucontact.panels
	});

}());
//# sourceMappingURL=zucontact.min.js.map
