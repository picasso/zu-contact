var zucontact_blocks = (function (exports) {
  'use strict';

  function _defineProperty(obj, key, value) {
    if (key in obj) {
      Object.defineProperty(obj, key, {
        value: value,
        enumerable: true,
        configurable: true,
        writable: true
      });
    } else {
      obj[key] = value;
    }

    return obj;
  }

  function _extends() {
    _extends = Object.assign || function (target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = arguments[i];

        for (var key in source) {
          if (Object.prototype.hasOwnProperty.call(source, key)) {
            target[key] = source[key];
          }
        }
      }

      return target;
    };

    return _extends.apply(this, arguments);
  }

  function ownKeys(object, enumerableOnly) {
    var keys = Object.keys(object);

    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object);
      if (enumerableOnly) symbols = symbols.filter(function (sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      });
      keys.push.apply(keys, symbols);
    }

    return keys;
  }

  function _objectSpread2(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i] != null ? arguments[i] : {};

      if (i % 2) {
        ownKeys(Object(source), true).forEach(function (key) {
          _defineProperty(target, key, source[key]);
        });
      } else if (Object.getOwnPropertyDescriptors) {
        Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
      } else {
        ownKeys(Object(source)).forEach(function (key) {
          Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
      }
    }

    return target;
  }

  // WordPress dependencies
  var _wp$components = wp.components,
      Path = _wp$components.Path,
      G = _wp$components.G,
      SVG = _wp$components.SVG; // Zukit dependencies

  var _wp$zukit$utils = wp.zukit.utils,
      getColor = _wp$zukit$utils.getColor,
      hexToRGBA = _wp$zukit$utils.hexToRGBA; // Custom foreground icon color based on the Zu Blocks branding

  var iconColor = getColor('violet'); // ZU Blocks category icon
  var form = /*#__PURE__*/React.createElement(SVG, {
    width: "24",
    height: "24",
    viewBox: "0 0 24 24",
    xmlns: "http://www.w3.org/2000/svg"
  }, /*#__PURE__*/React.createElement(G, null, /*#__PURE__*/React.createElement(Path, {
    d: "M4,22 C2.897,22 2,21.104 2,20 L2,15 C2,13.896 2.897,13 4,13 L20,13 C21.104,13 22,13.896 22,15 L22,20 C22,21.104 21.104,22 20,22 L4,22 z M20,15 L16,15 L16,20 L20,20 L20,15 z M14,15 L4,15 L4,20 L14,20 L14,15 z"
  }), /*#__PURE__*/React.createElement(Path, {
    d: "M4,11 C2.897,11 2,10.104 2,9 L2,4 C2,2.896 2.897,2 4,2 L20,2 C21.104,2 22,2.896 22,4 L22,9 C22,10.104 21.104,11 20,11 L4,11 z M20,4 L10,4 L10,9 L20,9.016 L20,4 z M8,4 L4,4 L4,9 L8,9 L8,4 z"
  }), /*#__PURE__*/React.createElement(Path, {
    d: "M9.672,15 L9,16.609 L12,18.059 L9.785,19.984 L8.382,19.984 L9,18.609 L6,17.16 L8.445,15 L9.672,15 z"
  })));
  var field = /*#__PURE__*/React.createElement(SVG, {
    width: "24",
    height: "24",
    viewBox: "0 0 24 24",
    xmlns: "http://www.w3.org/2000/svg"
  }, /*#__PURE__*/React.createElement(G, null, /*#__PURE__*/React.createElement(Path, {
    d: "M11,20 C11,21.103 10.104,22 9,22 L4,22 C2.896,22 2,21.103 2,20 L2,4 C2,2.896 2.896,2 4,2 L9,2 C10.104,2 11,2.896 11,4 L11,20 z M4,4 L4,14 L9,14 L9.016,4 L4,4 z M4,16 L4,20 L9,20 L9,16 L4,16 z"
  }), /*#__PURE__*/React.createElement(Path, {
    d: "M20,2 C21.104,2 22,2.896 22,4 L22,20 C22,21.103 21.104,22 20,22 L15,22 C13.896,22 13,21.103 13,20 L13,4 C13,2.896 13.896,2 15,2 L20,2 z M20,10 L15,10 L15,14 L20,14 L20,10 z M20,4 L15,4 L15,8 L20,8 L20,4 z"
  })));
  var excerpt = /*#__PURE__*/React.createElement(SVG, {
    width: "24",
    height: "24",
    viewBox: "0 0 24 24",
    xmlns: "http://www.w3.org/2000/svg"
  }, /*#__PURE__*/React.createElement(Path, {
    d: "M21,4 L3,4 C1.896,4 1,4.896 1,6 L1,18 C1,19.104 1.896,20 3,20 L21,20 C22.104,20 23,19.104 23,18 L23,6 C23,4.896 22.104,4 21,4 z M3,6 L21,6 L21,18 L3,18 L3,6 z"
  }), /*#__PURE__*/React.createElement(Path, {
    d: "M6.5,9 C7.053,9 7.5,9.448 7.5,10 C7.5,10.553 7.053,11 6.5,11 C5.948,11 5.5,10.553 5.5,10 C5.5,9.448 5.948,9 6.5,9 z",
    fill: hexToRGBA(iconColor, 0.8)
  }), /*#__PURE__*/React.createElement(Path, {
    d: "M8.714,10.5 C9.571,10.5 10,13.071 10,13.071 L4,13.071 C4,13.071 4.429,11.357 5.286,11.357 C6.144,11.357 6.143,11.786 6.786,11.786 C7.429,11.786 7.857,10.5 8.714,10.5 z",
    fill: hexToRGBA(iconColor, 0.8)
  }), /*#__PURE__*/React.createElement(Path, {
    d: "M9.509,7 C9.78,7 10,7.238 10,7.531 L10,13.469 C10,13.762 9.78,14 9.509,14 L4.491,14 C4.22,14 4,13.762 4,13.469 L4,7.531 C4,7.238 4.22,7 4.491,7 L9.509,7 z M9,8 L5,8 L5,13 L9,13 L9,8 z"
  }), /*#__PURE__*/React.createElement(Path, {
    d: "M17.095,15 L12.095,15 C11.821,15 11.595,15.225 11.595,15.5 C11.595,15.775 11.821,16 12.095,16 L17.095,16 C17.369,16 17.594,15.775 17.594,15.5 C17.594,15.225 17.369,15 17.095,15 z M12.095,14 L19.501,14 C19.775,14 20,13.775 20,13.5 C20,13.225 19.775,13 19.501,13 L12.095,13 C11.82,13 11.595,13.225 11.595,13.5 C11.595,13.775 11.82,14 12.095,14 z M16.5,12 C16.225,12 16,11.775 16,11.5 C16,11.225 16.225,11 16.5,11 L19.5,11 C19.775,11 20,11.225 20,11.5 C20,11.775 19.775,12 19.5,12 L16.5,12 z M15.095,11 C15.37,11 15.595,11.225 15.595,11.5 C15.595,11.775 15.37,12 15.095,12 L12.095,12 C11.82,12 11.595,11.775 11.595,11.5 C11.595,11.225 11.82,11 12.095,11 L15.095,11 z M19.501,9 C19.775,9 20,9.225 20,9.5 C20,9.775 19.775,10 19.501,10 L14.501,10 C14.227,10 14.001,9.775 14.001,9.5 C14.001,9.225 14.227,9 14.501,9 L19.501,9 z M12.095,10 C11.82,10 11.595,9.775 11.595,9.5 C11.595,9.225 11.82,9 12.095,9 L13.095,9 C13.37,9 13.595,9.225 13.595,9.5 C13.595,9.775 13.37,10 13.095,10 L12.095,10 z M18.5,8 C18.225,8 18,7.775 18,7.5 C18,7.225 18.225,7 18.5,7 L19.5,7 C19.775,7 20,7.225 20,7.5 C20,7.775 19.775,8 19.5,8 L18.5,8 z M17.095,7 C17.369,7 17.594,7.225 17.594,7.5 C17.594,7.775 17.369,8 17.095,8 L12.095,8 C11.821,8 11.595,7.775 11.595,7.5 C11.595,7.225 11.821,7 12.095,7 L17.095,7 z"
  }));
  var quote = /*#__PURE__*/React.createElement(SVG, {
    width: "24",
    height: "24",
    viewBox: "0 0 24 24",
    xmlns: "http://www.w3.org/2000/svg"
  }, /*#__PURE__*/React.createElement(G, null, /*#__PURE__*/React.createElement(Path, {
    d: "M21,4 L3,4 C1.896,4 1,4.896 1,6 L1,18 C1,19.104 1.896,20 3,20 L21,20 C22.104,20 23,19.104 23,18 L23,6 C23,4.896 22.104,4 21,4 z",
    fill: hexToRGBA(iconColor, 0.1)
  }), /*#__PURE__*/React.createElement(Path, {
    d: "M7.5,16 C7.225,16 7,15.775 7,15.5 C7,15.225 7.225,15 7.5,15 L20.452,15 C20.727,15 20.952,15.225 20.952,15.5 C20.952,15.775 20.727,16 20.452,16 L7.5,16 z"
  }), /*#__PURE__*/React.createElement(Path, {
    d: "M14.499,14 C14.224,14 13.999,13.775 13.999,13.5 C13.999,13.225 14.224,13 14.499,13 L20.498,13 C20.773,13 20.998,13.225 20.998,13.5 C20.998,13.775 20.773,14 20.498,14 L14.499,14 z"
  }), /*#__PURE__*/React.createElement(Path, {
    d: "M12.5,13 L7.5,13 C7.226,13 7,13.225 7,13.5 C7,13.775 7.226,14 7.5,14 L12.5,14 C12.774,14 12.999,13.775 12.999,13.5 C12.999,13.225 12.774,13 12.5,13 z"
  }), /*#__PURE__*/React.createElement(Path, {
    d: "M16.905,12 C16.63,12 16.405,11.775 16.405,11.5 C16.405,11.225 16.63,11 16.905,11 L20.484,11 C20.759,11 20.966,11.225 20.966,11.5 C20.966,11.775 20.741,12 20.466,12 L16.905,12 z"
  }), /*#__PURE__*/React.createElement(Path, {
    d: "M7.5,12 C7.225,12 7,11.775 7,11.5 C7,11.225 7.225,11 7.5,11 L14.905,11 C15.18,11 15.405,11.225 15.405,11.5 C15.405,11.775 15.18,12 14.905,12 L7.5,12 z"
  }), /*#__PURE__*/React.createElement(Path, {
    d: "M17.5,10 L20.5,10 C20.775,10 21,9.775 21,9.5 C21,9.225 20.775,9 20.5,9 L17.5,9 C17.225,9 17,9.225 17,9.5 C17,9.775 17.225,10 17.5,10 z"
  }), /*#__PURE__*/React.createElement(Path, {
    d: "M12.5,10 L15.5,10 C15.775,10 16,9.775 16,9.5 C16,9.225 15.775,9 15.5,9 L12.5,9 C12.225,9 12,9.225 12,9.5 C12,9.775 12.225,10 12.5,10 z"
  }), /*#__PURE__*/React.createElement(Path, {
    d: "M10.5,9 L7.5,9 C7.225,9 7,9.225 7,9.5 C7,9.775 7.225,10 7.5,10 L10.5,10 C10.775,10 11,9.775 11,9.5 C11,9.225 10.775,9 10.5,9 z"
  }), /*#__PURE__*/React.createElement(Path, {
    d: "M20.594,7 L15.594,7 C15.32,7 15.094,7.225 15.094,7.5 C15.094,7.775 15.32,8 15.594,8 L20.594,8 C20.868,8 21.093,7.775 21.093,7.5 C21.093,7.225 20.868,7 20.594,7 z"
  }), /*#__PURE__*/React.createElement(Path, {
    d: "M8.5,7 L8.547,7.02 L8.595,7 L13.595,7 C13.869,7 14.094,7.225 14.094,7.5 C14.094,7.775 13.869,8 13.595,8 L8.595,8 L8.547,7.98 L8.5,8 L7.5,8 C7.225,8 7,7.775 7,7.5 C7,7.225 7.225,7 7.5,7 L8.5,7 z"
  }), /*#__PURE__*/React.createElement(Path, {
    d: "M1,4 L4.531,4 L4.531,20 L1,20 L1,4 z"
  })));
  var wrap = /*#__PURE__*/React.createElement(SVG, {
    width: "24",
    height: "24",
    viewBox: "0 0 24 24",
    xmlns: "http://www.w3.org/2000/svg"
  }, /*#__PURE__*/React.createElement(Path, {
    d: "M13.504,18 L1.497,18 C1.225,18 1,18.225 1,18.5 C1,18.775 1.225,19 1.497,19 L13.504,19 C13.776,19 14,18.775 14,18.5 C14,18.225 13.776,18 13.504,18 z M22.501,16 C22.775,16 23,16.225 23,16.5 C23,16.775 22.775,17 22.501,17 L1.5,17 C1.226,17 1,16.775 1,16.5 C1,16.225 1.226,16 1.5,16 L22.501,16 z M12.501,15 L22.5,15 C22.775,15 23,14.775 23,14.5 C23,14.225 22.775,14 22.5,14 L12.501,14 C12.225,14 12,14.225 12,14.5 C12,14.775 12.225,15 12.501,15 z M12.501,13 L22.5,13 C22.775,13 23,12.775 23,12.5 C23,12.225 22.775,12 22.5,12 L12.501,12 C12.225,12 12,12.225 12,12.5 C12,12.775 12.225,13 12.501,13 z M12.501,11 L22.5,11 C22.775,11 23,10.775 23,10.5 C23,10.225 22.775,10 22.5,10 L12.501,10 C12.225,10 12,10.225 12,10.5 C12,10.775 12.225,11 12.501,11 z M12.501,9 L22.5,9 C22.775,9 23,8.775 23,8.5 C23,8.225 22.775,8 22.5,8 L12.501,8 C12.225,8 12,8.225 12,8.5 C12,8.775 12.225,9 12.501,9 z M22.47,6 C22.744,6 22.969,6.225 22.969,6.5 C22.969,6.775 22.744,7 22.47,7 L17.47,7 C17.196,7 16.97,6.775 16.97,6.5 C16.97,6.225 17.196,6 17.47,6 L22.47,6 z M5.47,7 L15.47,7 C15.745,7 15.97,6.775 15.97,6.5 C15.97,6.225 15.745,6 15.47,6 L5.47,6 C5.195,6 4.97,6.225 4.97,6.5 C4.97,6.775 5.195,7 5.47,7 z M3.495,6 C3.773,6 4,6.225 4,6.5 C4,6.775 3.773,7 3.495,7 L1.505,7 C1.227,7 1,6.775 1,6.5 C1,6.225 1.227,6 1.505,6 L3.495,6 z M22.501,4 C22.775,4 23,4.225 23,4.5 C23,4.775 22.775,5 22.501,5 L1.5,5 C1.226,5 1,4.775 1,4.5 C1,4.225 1.226,4 1.5,4 L22.501,4 z"
  }), /*#__PURE__*/React.createElement(Path, {
    d: "M9.076,11.352 C9.481,11.382 9.816,11.642 10,12.061 L10,15 L2,15 L2,13.454 C2.917,12.759 3.138,12.491 4.186,12.245 C5.452,12.177 5.456,12.688 6.408,12.688 C7.36,12.688 7.806,11.333 9.076,11.352 L9.076,11.352 z",
    fill: hexToRGBA(iconColor, 0.8)
  }), /*#__PURE__*/React.createElement(Path, {
    d: "M10.5,8 C10.776,8 11,8.263 11,8.588 L11,14.412 C11,14.737 10.776,15 10.5,15 L1.5,15 C1.224,15 1,14.737 1,14.412 L1,8.588 C1,8.263 1.224,8 1.5,8 L10.5,8 z M10,9 L2,9 L2,14 L10,14 L10,9 z"
  }));

  // WordPress dependencies
  var _lodash = lodash,
      includes = _lodash.includes,
      startCase = _lodash.startCase; // const { __ } = wp.i18n;
  // Zukit dependencies

  var externalData = wp.zukit.utils.externalData; // Internal dependencies

  var zuBlocks = ['zu/field', 'zu/form'];
  function blockTitle(blockName) {
    return includes(zuBlocks, blockName) ? "".concat(startCase(blockName.replace('zu/', ''))) : blockName;
  } // Gets JSON data (CSS prefix, form action, etc.) from PHP

  var pluginDefaults = externalData('zucontact_blocks_data', {
    prefix: 'zu',
    action: 'submit'
  }); // re-export all named imports ------------------------------------------------]

  // WordPress dependencies
  var _lodash$1 = lodash,
      isNil = _lodash$1.isNil; // Zukit dependencies

  var mergeClasses = wp.zukit.utils.mergeClasses; // Internal dependencies
  var cssPrefix = pluginDefaults.prefix; // export const rowPrefix = 'components-zu-form';

  var okIcon = null;
  var errorIcon = null;
  var defaultMessage = null;

  function prefix_it(name) {
    var divider = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '-';
    if (isNil(name)) return cssPrefix;
    if (divider === '[]') return "".concat(cssPrefix, "[").concat(name, "]");
    return "".concat(cssPrefix).concat(divider).concat(name);
  }

  var ZuForm = function ZuForm(_ref) {
    var className = _ref.className,
        name = _ref.name,
        title = _ref.title,
        children = _ref.children;
    var nameWithPrefix = prefix_it(name);
    var formTitle = !title ? null : /*#__PURE__*/React.createElement("h2", {
      className: mergeClasses(prefix_it('subheading'), 'before_posting')
    }, title);
    var loader = null;
    var nonce = null;
    var postId = 0; //get_the_ID(),

    var postLink = ''; //        trailingslashit($_SERVER['REQUEST_URI']),

    return /*#__PURE__*/React.createElement("div", {
      id: nameWithPrefix,
      className: mergeClasses(prefix_it('container'), name, className)
    }, loader, formTitle, /*#__PURE__*/React.createElement("div", {
      className: prefix_it('status'),
      style: {
        visibility: 'hidden'
      }
    }, /*#__PURE__*/React.createElement("span", {
      className: "icon-ok"
    }, okIcon), /*#__PURE__*/React.createElement("span", {
      className: "icon-error"
    }, errorIcon), /*#__PURE__*/React.createElement("span", {
      className: "message",
      "data-errmsg": defaultMessage
    })), /*#__PURE__*/React.createElement("div", {
      className: mergeClasses(prefix_it('form-container'), name)
    }, /*#__PURE__*/React.createElement("form", {
      className: mergeClasses(prefix_it('form'), name),
      id: prefix_it('form'),
      name: prefix_it(),
      role: "form",
      method: "post"
    }, nonce, /*#__PURE__*/React.createElement("input", {
      type: "hidden",
      name: prefix_it('_fname', '[]'),
      value: name
    }), /*#__PURE__*/React.createElement("input", {
      type: "hidden",
      name: prefix_it('_post_link', '[]'),
      value: postLink
    }), /*#__PURE__*/React.createElement("input", {
      type: "hidden",
      name: prefix_it('_post_id', '[]'),
      value: postId
    }), children)));
  };

  // WordPress dependencies
  // const { find } = lodash;
  var __ = wp.i18n.__; // const { compose } = wp.compose;

  var _wp$components$1 = wp.components,
      PanelBody = _wp$components$1.PanelBody,
      TextControl = _wp$components$1.TextControl;
  var _wp$blockEditor = wp.blockEditor,
      InnerBlocks = _wp$blockEditor.InnerBlocks,
      InspectorControls = _wp$blockEditor.InspectorControls; // const { useMemo } = wp.element;

  var _pluginDefaults$templ = pluginDefaults.templates,
      templates = _pluginDefaults$templ === void 0 ? {} : _pluginDefaults$templ;

  var ZuFormEdit = function ZuFormEdit(_ref) {
    var className = _ref.className,
        attributes = _ref.attributes,
        setAttributes = _ref.setAttributes;
    var name = attributes.name,
        title = attributes.title; // if the layout was not selected - display the layout selection
    // if(!layout) {
    // 	return (
    // 		<RowLayout
    // 			classPrefix={ ZuForm.rowPrefix }
    // 			columns={ columns }
    // 			layout={ layout }
    // 			setAttributes={ setAttributes }
    // 		/>
    // 	);
    // }
    // grid row with classes & attributtes
    // Create template object based on layout options
    // 	'50_50': [
    // 				[ columnBlock, { width: '50%' } ],
    // 				[ columnBlock, { width: '50%' } ],
    // 			 ],
    // console.log(templates['booking']);

    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(InspectorControls, null, /*#__PURE__*/React.createElement(PanelBody, {
      title: __('Form Settings', 'zu-contact')
    }, /*#__PURE__*/React.createElement(TextControl, {
      label: __('Form Id', 'zu-contact'),
      value: title || '',
      onChange: function onChange(val) {
        return setAttributes({
          title: val
        });
      }
    }))), /*#__PURE__*/React.createElement(ZuForm, _extends({
      isEditor: true
    }, {
      className: className,
      name: name,
      title: title
    }), /*#__PURE__*/React.createElement(InnerBlocks, {
      allowedBlocks: ['zu/filed'],
      template: templates['booking'],
      templateLock: "all" // templateInsertUpdatesSelection={ columns === 1 }
      ,
      renderAppender: function renderAppender() {
        return null;
      },
      __experimentalCaptureToolbars: true
    })));
  };

  // WordPress dependencies
  var __$1 = wp.i18n.__; // Internal dependencies
  var name = 'zu/form';
  var title = blockTitle(name);
  var attributes = {
    name: {
      type: 'string' // source: 'attribute',
      // attribute: 'id',

    },
    // title: {
    //     type: 'number',
    //     // selector: '.x_row',
    //     // source: 'attribute',
    //     // attribute: 'data-columns',
    // },
    title: {
      type: 'string' // source: 'attribute',
      // attribute: 'data-layout',

    }
  }; // id, ['data-columns']: columns, ['data-layout']: layout

  var metadata = {
    name: name,
    title: title,
    description: __$1('Add a contact form to your page.'),
    category: 'layout',
    keywords: [__$1('contact'), __$1('feedback'), __$1('form')],
    icon: {
      src: form,
      foreground: iconColor
    },
    supports: {
      reusable: false,
      html: false,
      align: false
    },
    attributes: attributes
  };

  // WordPress dependencies
  var InnerBlocks$1 = wp.blockEditor.InnerBlocks; // Internal dependencies

  var save = function save(_ref) {
    var className = _ref.className,
        attributes = _ref.attributes;
    var name = attributes.name,
        title = attributes.title;
    return /*#__PURE__*/React.createElement(ZuForm, {
      className: className,
      name: name,
      title: title
    }, /*#__PURE__*/React.createElement(InnerBlocks$1.Content, null));
  };

  var transforms = {};

  var settings = _objectSpread2(_objectSpread2({}, metadata), {}, {
    transforms: transforms,
    edit: ZuFormEdit,
    save: save
  });

  var form$1 = /*#__PURE__*/Object.freeze({
    __proto__: null,
    settings: settings,
    name: name,
    title: title
  });

  // WordPress dependencies
  var _lodash$2 = lodash,
      isArray = _lodash$2.isArray,
      get = _lodash$2.get; // Zukit dependencies

  var mergeClasses$1 = wp.zukit.utils.mergeClasses; // Internal dependencies
  var _pluginDefaults$prefi = pluginDefaults.prefix,
      cssPrefix$1 = _pluginDefaults$prefi === void 0 ? 'zu' : _pluginDefaults$prefi;

  var ZuField = function ZuField(_ref) {
    var className = _ref.className,
        id = _ref.id,
        type = _ref.type,
        required = _ref.required,
        value = _ref.value,
        placeholder = _ref.placeholder,
        label = _ref.label,
        _ref$rows = _ref.rows,
        rows = _ref$rows === void 0 ? 10 : _ref$rows;
    var nameWithPrefix = "".concat(cssPrefix$1, "-").concat(id);
    var requiredData = {
      'data-required_rule': required ? true : null,
      'data-required': required ? isArray ? get(required, '0', null) : required : null,
      'data-required_valid': isArray ? get(required, '1', null) : null
    }; // if(value === null) console.log('input with null', {className,
    // id,
    // type,
    // required,
    // value,
    // placeholder,
    // label,});

    var control = type === 'textarea' ? /*#__PURE__*/React.createElement("textarea", _extends({
      className: "form-control",
      id: nameWithPrefix,
      name: "".concat(cssPrefix$1, "[").concat(id, "]"),
      rows: rows,
      placeholder: placeholder
    }, requiredData), value) : type === 'submit' ? /*#__PURE__*/React.createElement("input", {
      className: "button button-submit",
      type: type,
      id: nameWithPrefix,
      value: label || ''
    }) : /*#__PURE__*/React.createElement("input", _extends({
      className: "form-control",
      type: type,
      id: nameWithPrefix,
      name: nameWithPrefix,
      value: value || '',
      checked: type === 'checkbox' ? value === true ? true : null : null,
      placeholder: placeholder,
      onChange: function onChange() {
        return value;
      }
    }, requiredData));
    var controlLabel = type === 'checkbox' || type === 'submit' ? null : /*#__PURE__*/React.createElement("label", {
      htmlFor: nameWithPrefix
    }, label, required ? /*#__PURE__*/React.createElement("span", {
      className: "required"
    }, "*") : null);
    return /*#__PURE__*/React.createElement("div", {
      className: mergeClasses$1("".concat(cssPrefix$1, "-control"), 'success', {
        __submit: type === 'submit'
      }, className)
    }, controlLabel, /*#__PURE__*/React.createElement("div", {
      className: mergeClasses$1("".concat(cssPrefix$1, "-input"), type)
    }, control, type === 'checkbox' ? label : null, type === 'submit' ? null : /*#__PURE__*/React.createElement("span", {
      htmlFor: nameWithPrefix,
      className: "validation"
    })));
  };

  // WordPress dependencies
  var _lodash$3 = lodash,
      isEmpty = _lodash$3.isEmpty;
  var __$2 = wp.i18n.__; // const { compose } = wp.compose;

  var _wp$components$2 = wp.components,
      PanelBody$1 = _wp$components$2.PanelBody,
      ToggleControl = _wp$components$2.ToggleControl,
      TextControl$1 = _wp$components$2.TextControl; //Button, SelectControl,

  var InspectorControls$1 = wp.blockEditor.InspectorControls; // const { withSelect, withDispatch } = wp.data;

  var ZuFieldEdit = function ZuFieldEdit(_ref) {
    var attributes = _ref.attributes,
        className = _ref.className,
        setAttributes = _ref.setAttributes;
    var id = attributes.id,
        label = attributes.label,
        type = attributes.type,
        required = attributes.required,
        value = attributes.value,
        placeholder = attributes.placeholder,
        rows = attributes.rows; // const layoutSet = columnAttributes(width, className, columnLayout);
    // const widthValues = columnValues(parentColumns, columnIndex);

    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(InspectorControls$1, null, /*#__PURE__*/React.createElement(PanelBody$1, {
      title: __$2('Field Settings', 'zu-contact')
    }, /*#__PURE__*/React.createElement(TextControl$1, {
      label: __$2('Field Id', 'zu-contact'),
      value: id || '',
      onChange: function onChange(val) {
        return setAttributes({
          id: val
        });
      }
    }), /*#__PURE__*/React.createElement(ToggleControl, {
      label: __$2('This is a required field.', 'zu-contact'),
      checked: !isEmpty(required),
      onChange: function onChange() {
        return setAttributes({
          required: !required
        });
      }
    }))), /*#__PURE__*/React.createElement(ZuField, {
      className: className,
      id: id,
      type: type,
      required: required,
      value: value,
      placeholder: placeholder,
      label: label,
      rows: rows
    }));
  };

  // WordPress dependencies
  var __$3 = wp.i18n.__; // Internal dependencies
  var name$1 = 'zu/field';
  var title$1 = blockTitle(name$1);
  var attributes$1 = {
    id: {
      type: 'string'
    },
    label: {
      type: 'string'
    },
    type: {
      type: 'string'
    },
    required: {
      type: 'string'
    },
    value: {
      type: 'string'
    },
    placeholder: {
      type: 'string'
    },
    rows: {
      type: 'string'
    }
  };
  var metadata$1 = {
    name: name$1,
    title: title$1,
    description: __$3('A text box for longer responses.'),
    category: 'layout',
    keywords: [__$3('field'), __$3('feedback'), __$3('form')],
    icon: {
      src: field,
      foreground: iconColor
    },
    parent: ['zu/form'],
    supports: {
      align: false
    },
    attributes: attributes$1
  };

  // WordPress dependencies

  var save$1 = function save(_ref) {
    var className = _ref.className,
        attributes = _ref.attributes;
    var id = attributes.id,
        label = attributes.label,
        type = attributes.type,
        required = attributes.required,
        value = attributes.value,
        placeholder = attributes.placeholder,
        rows = attributes.rows;
    return /*#__PURE__*/React.createElement(ZuField, {
      className: className,
      id: id,
      type: type,
      required: required,
      value: value,
      placeholder: placeholder,
      label: label,
      rows: rows
    });
  };

  var transforms$1 = {};

  var settings$1 = _objectSpread2(_objectSpread2({}, metadata$1), {}, {
    transforms: transforms$1,
    edit: ZuFieldEdit,
    save: save$1
  });

  var field$1 = /*#__PURE__*/Object.freeze({
    __proto__: null,
    settings: settings$1,
    name: name$1,
    title: title$1
  });

  // WordPress dependencies
  var registerBlockType = wp.blocks.registerBlockType; // Import debug object and make it available from global scope
  // import zubug from './shared/debug.js';
  // window.Zubug = zubug;
  // Zukit dependencies

  var _wp$zukit$utils$1 = wp.zukit.utils,
      registerCollection = _wp$zukit$utils$1.registerCollection,
      registerCategory = _wp$zukit$utils$1.registerCategory,
      brandAssets = _wp$zukit$utils$1.brandAssets; // Internal dependencies
  // import { registerPlugins } from './zu-plugins.js';
  // import { editorInit } from './zu-admin.js';
  // Register ZU blocks collection or category

  var supportsCollections = registerCollection();
  if (!supportsCollections) registerCategory(); //  Register Blocks
  function registerBlocks() {
    [form$1, field$1].forEach(function (block) {
      if (!block) return;
      var name = block.name,
          settings = block.settings;
      if (!supportsCollections) settings.category = brandAssets.slug;
      registerBlockType(name, settings);
    });
  }
  registerBlocks();

  exports.registerBlocks = registerBlocks;

  Object.defineProperty(exports, '__esModule', { value: true });

  return exports;

}({}));
//# sourceMappingURL=zucontact-blocks.min.js.map
